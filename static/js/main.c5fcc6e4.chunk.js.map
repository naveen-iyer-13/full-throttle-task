{"version":3,"sources":["testData.js","App.js","serviceWorker.js","index.js"],"names":["testData","columns","Layout","Header","title","dataIndex","key","App","props","useState","members","data","setTestData","showDetails","setShowDetails","selectedRow","setSelectedRow","convertTime","timestamp","date","Date","cHours","getHours","cMinutes","getMinutes","join","useEffect","arrangedData","forEach","single","id","newActivity","activity_periods","map","act","start_time","end_time","start","end","push","index","handleCancel","className","dataSource","onRow","record","rowIndex","onClick","event","row","filter","console","log","onSelect","visible","onOk","onCancel","defaultView","plugins","resourceDayGridPlugin","events","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oUAyCeA,G,OAzCA,CACd,IAAM,EACN,QAAW,CAAC,CACV,GAAM,YACN,UAAa,gBACb,GAAM,sBACN,iBAAoB,CAAC,CACnB,WAAc,aACd,SAAY,cAEb,CACC,WAAc,aACd,SAAY,cAEb,CACC,WAAc,aACd,SAAY,gBAIf,CACC,GAAM,YACN,UAAa,mBACb,GAAM,eACN,iBAAoB,CAAC,CACnB,WAAc,aACd,SAAY,cAEb,CACC,WAAc,aACd,SAAY,cAEb,CACC,WAAc,aACd,SAAY,mBCvBbC,G,OAFeC,IAAXC,OAEM,CACZ,CACEC,MAAO,KACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,OACPC,UAAW,YACXC,IAAK,aAEP,CACEF,MAAO,WACPC,UAAW,KACXC,IAAK,QA+FMC,MA3Ff,SAAaC,GAAO,IAAD,EAEWC,mBAAST,EAASU,SAF7B,mBAEVC,EAFU,KAEJC,EAFI,OAGqBH,mBAAS,IAH9B,gCAIqBA,oBAAS,IAJ9B,mBAIVI,EAJU,KAIGC,EAJH,OAKqBL,mBAAS,IAL9B,mBAKVM,EALU,KAKGC,EALH,KAOXC,EAAc,SAACC,GACnB,IAAIC,EAAO,IAAIC,KAAe,IAAVF,GAChBG,EAASF,EAAKG,WAAa,GAAK,IAAMH,EAAKG,WAAaH,EAAKG,WAC7DC,EAAiC,IAAtBJ,EAAKK,aAAqB,KAAOL,EAAKK,aAMrD,OAJIH,EAAS,IACJ,KAGS,OAAdH,EACK,CACLG,EACA,IACAE,GACAE,KAAK,IAGA,IAKXC,qBAAU,WACR,IAAIC,EAAe,GACnBhB,EAAKiB,SAAQ,SAACC,EAAQC,GACpB,IAAIC,EAAcF,EAAOG,iBAAiBC,KAAI,SAAAC,GAC5C,IAAI9B,EAAaa,EAAYiB,EAAIC,YAAe,OAASlB,EAAYiB,EAAIE,UACzE,MAAO,CAACC,MAAO,IAAIjB,KAAoB,IAAfc,EAAIC,YAAkBG,IAAK,IAAIlB,KAAkB,IAAbc,EAAIE,UAAgBhC,MAAOA,MAEzFuB,EAAaY,KAAb,eACKV,EADL,CAEEW,MAAOV,EAAG,EACVE,iBAAkBD,QAGtBnB,EAAYe,KACX,IAEH,IAOMc,EAAe,WACnB3B,GAAe,GACfE,EAAe,KAIjB,OACE,yBAAK0B,UAAU,OACX,wBAAIA,UAAU,UAAd,gBACA,uBAAGA,UAAU,QAAb,uEACA,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAOzC,QAASA,EAAS0C,WAAYhC,EACnCiC,MAAO,SAACC,EAAQC,GACd,MAAO,CACLC,QAAS,SAAAC,IArBN,SAAClB,GAChBhB,GAAe,GACf,IAAImC,EAAMtC,EAAKuC,QAAO,SAAAD,GAAG,OAAIA,EAAIT,QAAUV,KAC3Cd,EAAeiC,EAAI,IACnBE,QAAQC,IAAIH,GAiBmBI,CAASR,EAAOL,aAK3C,kBAAC,IAAD,CACEpC,MAAM,wBACNkD,QAASzC,EACT0C,KAAM,kBAAMd,KACZe,SAAU,kBAAMf,MAEhB,uBAAGC,UAAU,cAAb,4CACA,kBAAC,IAAD,CACEe,YAAY,eACZC,QAAS,CAAEC,KACXC,OAAQ7C,GAAeA,EAAYiB,iBAAmBjB,EAAYiB,iBAAmB,QClG7E6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.c5fcc6e4.chunk.js","sourcesContent":["let testData = {\n\t\"ok\": true,\n\t\"members\": [{\n\t\t\t\"id\": \"W012A3CDE\",\n\t\t\t\"real_name\": \"Egon Spengler\",\n\t\t\t\"tz\": \"America/Los_Angeles\",\n\t\t\t\"activity_periods\": [{\n\t\t\t\t\t\"start_time\": \"1587230330\",\n\t\t\t\t\t\"end_time\": \"1587233930\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"start_time\": \"1587313130\",\n\t\t\t\t\t\"end_time\": \"1587316730\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"start_time\": \"1587399530\",\n\t\t\t\t\t\"end_time\": \"1587403130\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"W07QCRPA4\",\n\t\t\t\"real_name\": \"Glinda Southgood\",\n\t\t\t\"tz\": \"Asia/Kolkata\",\n\t\t\t\"activity_periods\": [{\n\t\t\t\t\t\"start_time\": \"1587485930\",\n\t\t\t\t\t\"end_time\": \"1587489530\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"start_time\": \"1587493130\",\n\t\t\t\t\t\"end_time\": \"1587496730\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"start_time\": \"1587579530\",\n\t\t\t\t\t\"end_time\": \"1587583130\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n\nexport default testData\n","import React, { useState, useEffect } from 'react';\nimport { Layout } from 'antd';\nimport { Table, Tag } from 'antd';\nimport FullCalendar from '@fullcalendar/react'\nimport { Modal, Button } from 'antd';\nimport resourceDayGridPlugin from '@fullcalendar/resource-daygrid';\nimport moment from 'moment'\nimport testData from './testData'\nimport './App.css';\nconst { Header } = Layout;\n\nlet columns = [\n  {\n    title: 'ID',\n    dataIndex: 'index',\n    key: 'index',\n  },\n  {\n    title: 'Name',\n    dataIndex: 'real_name',\n    key: 'real_name',\n  },\n  {\n    title: 'Timezone',\n    dataIndex: 'tz',\n    key: 'tz',\n  },\n]\n\nfunction App(props){\n\n  const [data, setTestData] = useState(testData.members)\n  const [loadingText, setLoadingText] = useState('')\n  const [showDetails, setShowDetails] = useState(false)\n  const [selectedRow, setSelectedRow] = useState({})\n\n  const convertTime = (timestamp) => {\n    var date = new Date(timestamp*1000);\n    var cHours = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n    var cMinutes = date.getMinutes() === 0 ? \"00\" : date.getMinutes() ;\n    var AMPM = \"PM\"\n    if (cHours < 12) {\n      AMPM = \"AM\"\n    }\n\n    if (timestamp !== null) {\n      return [\n        cHours,\n        \":\",\n        cMinutes,\n      ].join('');                                  // Glue the pieces together\n    }\n    else {\n      return \"\";\n    }\n  }\n\n\n  useEffect(() => {\n    var arrangedData = []\n    data.forEach((single, id) => {\n      let newActivity = single.activity_periods.map(act => {\n        let title = \"\" + convertTime(act.start_time)  + \" to \" + convertTime(act.end_time)\n        return {start: new Date(act.start_time*1000), end: new Date(act.end_time*1000), title: title};\n      })\n      arrangedData.push({\n        ...single,\n        index: id+1,\n        activity_periods: newActivity\n      })\n    })\n    setTestData(arrangedData)\n  }, [])\n\n  const onSelect = (id) => {\n    setShowDetails(true)\n    let row = data.filter(row => row.index === id)\n    setSelectedRow(row[0])\n    console.log(row);\n  }\n\n  const handleCancel = () => {\n    setShowDetails(false)\n    setSelectedRow({})\n  }\n\n\n  return (\n    <div className=\"app\">\n        <h1 className=\"header\">Members List</h1>\n        <p className=\"hint\">Click on any row to get the activity details of the particular user</p>\n        <div className=\"table-container\">\n          <Table columns={columns} dataSource={data}\n            onRow={(record, rowIndex) => {\n              return {\n                onClick: event => {onSelect(record.index)}, // click row\n              };\n            }}\n            />\n        </div>\n        <Modal\n          title=\"User Activity Details\"\n          visible={showDetails}\n          onOk={() => handleCancel()}\n          onCancel={() => handleCancel()}\n          >\n          <p className=\"modal-hint\">Displaying the time when user was online</p>\n          <FullCalendar\n            defaultView=\"dayGridMonth\"\n            plugins={[ resourceDayGridPlugin ]}\n            events={selectedRow && selectedRow.activity_periods ? selectedRow.activity_periods : []}\n            />\n        </Modal>\n    </div>\n  )\n\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}